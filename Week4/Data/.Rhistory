data <- subset(data, data$Year == 2001)
data
data
lm(Tarsus~Mass, data = data)
model <- lm(Tarsus~Mass, data = data)
summary(model)
plot(Tarsus~Mass, data = data)
x <- c(1,2,3,4,8)
y <- c(4,3,5,7,9)
model1 <- (lm(y~x))
model1
summary(model1)
anova(model1)
resid(model1)
cov(x,y)
var(x)
plot(y~x)
data
plot(data$Mass~data$Tarsus, ylab="mass (g)", xlab="Tarsis (mm)", pch=19, cex=0.4)
data
plot(data$Mass~data$Tarsus, ylab="mass (g)", xlab="Tarsis (mm)", pch=19, cex=0.4)
d1<-subset(data, data$Mass!="NA")
d2<-subset(d1, d1$Tarsus!="NA")
length(d2$Tarsus)
## [1] 1644
model1<-lm(Mass~Tarsus, data=d2)
summary(model1)
hist(model1$residuals)
requre(Webpower)
requre(Webpower)
install.packages("WebPower")
library(WebPower)
requre(Webpower)
requre(WebPower)
?WebPower
0.3/1.2
x <- seq(from=0, to=5, y=0.1)
y <- rnorm(51, mean=1, sd=1.3)
x <- seq(from=0, to=5, y=0.1)
length(x)
plot(hist(y, breaks-10))
plot(hist(y, breaks=10))
mean(y)
sd(y)
segments(x0=(mean(y)+0.25*sd(y)), y0=(0), x1=(mean(y)+0.25*sd(y)), y1=40)
segments(x0=(mean(y)+0.25*sd(y)), y0=(0), x1=(mean(y)+0.25*sd(y)), y1=40, lty=1, col='red')
segments(x0=(mean(y)), y0=(0), x1=(mean(y)), y1=40, lty=1, col="blue")
segments(x0=(mean(y)+0.25*sd(y)), y0=(0), x1=(mean(y)+0.25*sd(y)), y1=40, lty=1, col='red')
segments()
?wp.t
wp.t(d=0.25, power=0.8, type="two.sample", alternative="two.sided")
res.1 <- wp.t(n1=seq(20, 300, 20), n2=seq(20, 300, 20), d=0.25, type="Two.sample..2n", alternative="two.sided")
plot(res.1, xvar='n1', yvar+'power')
res.1 <- wp.t(n1=seq(20, 300, 20), n2=seq(20, 300, 20), d=0.25, type="Two.sample..2n", alternative="two.sided")
plot(res.1, xvar='n1', yvar+'power')
res.1 <- wp.t(n1=seq(20, 300, 20), n2=seq(20, 300, 20), d=0.25, type="Two.sample..2n", alternative="two.sided")
res.1 <- wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="Two.sample..2n", alternative="two.sided")
plot(res.1, xvar='n1', yvar+'power')
plot(res.1, xvar='n1', yvar='power')
res.1 <- wp.t(n1=seq(20,300,20), n2=seq(20,300,20), d=0.25, type="Two.sample..2n", alternative="two.sided")
rm(list = ls())
y1<-rnorm(10, mean=0, sd=sqrt(1))
rm(list = ls())
y1<-rnorm(10, mean=0, sd=sqrt(1))
y2<-rnorm(10, mean=0, sd=sqrt(10))
y3<-rnorm(10, mean=0, sd=sqrt(100))
var(y1)
rm(list = ls())
y1<-rnorm(10, mean=0, sd=sqrt(1))
var(y1)
y2<-rnorm(10, mean=0, sd=sqrt(10))
var(y2)
y3<-rnorm(10, mean=0, sd=sqrt(100))
var(y3)
x<-rep(0,10)
par(mfrow = c(1, 3))
plot(x, y1, xlim=c(-0.1,0.1), ylim=c(-12, 12), pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
plot(x, y2, xlim=c(-0.1,0.1), ylim=c(-12, 12), pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
plot(x, y3, xlim=c(-0.1,0.1), ylim=c(-12, 12), pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
?polygon()
par(mfrow = c(1, 3))
abline(v=0)
abline(h=0)
plot(x, y2, xlim=c(-0.1,0.1), ylim=c(-12, 12), pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
plot(x, y3, xlim=c(-0.1,0.1), ylim=c(-12, 12), pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
?polygon()
# lets plot this again, this time with the squares.
?polygon()
par(mfrow = c(1, 3))
plot(x, y1, xlim=c(-12,12), ylim=c(-12,12) ,pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
polygon(x=c(0,0,y1[1],y1[1]),y=c(0,y1[1],y1[1],0), col=rgb(1, 0, 0,0.2))
polygon(x=c(0,0,y1[2],y1[2]),y=c(0,y1[2],y1[2],0), col=rgb(1, 0, 0,0.2))
Statistics with Sparrows - 10
?polygon()
par(mfrow = c(1, 3))
plot(x, y1, xlim=c(-12,12), ylim=c(-12,12) ,pch=19, cex=0.8, col="red")
abline(v=0)
abline(h=0)
polygon(x=c(0,0,y1[1],y1[1]),y=c(0,y1[1],y1[1],0), col=rgb(1, 0, 0,0.2))
polygon(x=c(0,0,y1[2],y1[2]),y=c(0,y1[2],y1[2],0), col=rgb(1, 0, 0,0.2))
Statistics with Sparrows - 10
plot(x, y3, xlim=c(-12,12), ylim=c(-12,12), pch=19, cex=0.8,, col="darkgreen"
)
abline(v=0)
abline(h=0)
for (i in 1:length(y3)) {
polygon(x=c(0,0,y3[i],y3[i]),y=c(0,y3[i],y3[i],0), col=rgb(0, 1, 0,0.2))
}
rm(list = ls())
par(mfrow = c(1, 3))
x<-c(-10:10)
var(x)
## [1] 38.5
y1<-x*1 + rnorm(21, mean=0, sd=sqrt(1))
# here the association is 1:1
cov(x, y1)
## [1] 39.42318
plot(x, y1, xlim=c(-10,10), ylim=c(-20, 20), col="red", pch=19, cex=0.8, main
=paste("Cov=",round(cov(x,y1),digits=2)))
y2<-rnorm(21, mean=0, sd=sqrt(1))
# Here, there is no association
cov(x, y2)
## [1] 1.572258
plot(x, y2, xlim=c(-10,10), ylim=c(-20, 20), col="blue", pch=19, cex=0.8, mai
n=paste("Cov=",round(cov(x,y2),digits=2)))
y3<- x* (-1) +rnorm(21, mean=0, sd=sqrt(1))
# Here, the association is negative
cov(x, y3)
## [1] -34.6899
plot(x, y3, xlim=c(-10,10), ylim=c(-20, 20), col="darkgreen", pch=19, cex=0.8
, main=paste("Cov=",round(cov(x,y3),digits=2)))
## [1] 1.572258
plot(x, y2, xlim=c(-10,10), ylim=c(-20, 20), col="blue", pch=19, cex=0.8, mai
n=paste("Cov=",round(cov(x,y2),digits=2)))
y3<- x* (-1) +rnorm(21, mean=0, sd=sqrt(1))
# Here, the association is negative
cov(x, y3)
## [1] -34.6899
plot(x, y3, xlim=c(-10,10), ylim=c(-20, 20), col="darkgreen", pch=19, cex=0.8
, main=paste("Cov=",round(cov(x,y3),digits=2)))
rm(list = ls())
par(mfrow = c(1, 3))
x<-c(-10:10)
var(x)
## [1] 38.5
y1<-x*1 + rnorm(21, mean=0, sd=sqrt(1))
# here the association is 1:1
cov(x, y1)
## [1] 39.42318
plot(x, y1, xlim=c(-10,10), ylim=c(-20, 20), col="red", pch=19, cex=0.8, main
=paste("Cov=",round(cov(x,y1),digits=2)))
y2<-rnorm(21, mean=0, sd=sqrt(1))
# Here, there is no association
cov(x, y2)
## [1] 1.572258
plot(x, y2, xlim=c(-10,10), ylim=c(-20, 20), col="blue", pch=19, cex=0.8, mai
n=paste("Cov=",round(cov(x,y2),digits=2)))
y3<- x* (-1) +rnorm(21, mean=0, sd=sqrt(1))
# Here, the association is negative
cov(x, y3)
## [1] -34.6899
plot(x, y3, xlim=c(-10,10), ylim=c(-20, 20), col="darkgreen", pch=19, cex=0.8
, main=paste("Cov=",round(cov(x,y3),digits=2)))
rm(list=ls())
data <- read.delim("daphnia.txt")
summary(data)
head(data)
data
str(data)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
plot(Growth.rate ~ as.factor(Detergent), data = data)
plot(Growth.rate ~ as.factor(Daphnia), data = data)
par(mfrow = c(1, 2))
plot(Growth.rate ~ as.factor(Detergent), data = data)
plot(Growth.rate ~ as.factor(Daphnia), data = data)
require(dplyr)
daphnia %>%
group_by(Detergent) %>%
summarise (variance=var(Growth.rate))
daphnia %>%
group_by(Daphnia) %>%
summarise (variance=var(Growth.rate))
## # A tibble: 4 x 2
## Detergent variance
## <chr> <dbl>
## 1 BrandA 1.51
## 2 BrandB 1.09
## 3 BrandC 1.78
## 4 BrandD 2.38
daphnia %>%
group_by(Daphnia) %>%
summarise (variance=var(Growth.rate))
## # A tibble: 4 x 2
## Detergent variance
## <chr> <dbl>
## 1 BrandA 1.51
## 2 BrandB 1.09
## 3 BrandC 1.78
## 4 BrandD 2.38
daphnia %>%
group_by(Daphnia) %>%
summarise (variance=var(Growth.rate))
data %>%
group_by(Detergent) %>%
summarise (variance=var(Growth.rate))
## # A tibble: 4 x 2
## Detergent variance
## <chr> <dbl>
## 1 BrandA 1.51
## 2 BrandB 1.09
## 3 BrandC 1.78
## 4 BrandD 2.38
data %>%
group_by(Daphnia) %>%
summarise (variance=var(Growth.rate))
## # A tibble: 3 x 2
hist(data$Growth.rate)
hist(data$Growth.rate)
daphniaMod <- lm(Growth.rate ~ Detergent + Daphnia, data = data)
summary(daphniaMod)
par(mfrow=c(1, 2))
data <- read.delim("daphnia.txt")
data <- read.csv("SparrowSize.csv")
data <- subset(data, data$Wing!="NA")
data <- subset(data, data$Wing!="NA")
summary(data$Wing)
hist(data$Wing)
rm(list=ls())
data <- read.csv("SparrowSize.csv")
data <- subset(data, data$Wing!="NA")
summary(data$Wing)
hist(data$Wing)
boxplot(Wing, data$data)
boxplot(Wing, data$data)
boxplot(Wing, data = data)
model1 <- lm(Wing ~ Sex.1, data = data)
summary(model1)
summary(model1)
boxplot(data$Wing~data$sex.1, ylab='Wing length (mm)')
boxplot(data$Wing~data$sex.1, ylab='Wing length (mm)')
boxplot(data$Wing~data$Sex.1, ylab='Wing length (mm)')
anova(model1)
anova(model1)
anova(model1)
model1 <- lm(Mass~as.factor(Year), data = data
anvoa(model2)
summary(m2)
anvoa(model2)
model2 <- lm(Mass~as.factor(Year), data = data )
anvoa(model2)
summary(model2)
anova(model2)
summary(model2)
#load data
data <- read.csv("daphnia")
#load data
data <- read.delim("daphnia.txt")
summary(data)
#check for outliers using boxplots
par(mfrow = c(1, 2))
plot(Growth.rate ~ as.factor(Detergent), data=data)
hist(data$Growth.rate)
seFun <- function(x) {
sqrt(var(x)/length(x)) # create a function to calculate the standard error
}
detergentMean <- with(daphnia, tapply(Growth.rate, INDEX = Detergent,
FUN = mean))
seFun <- function(x) {
sqrt(var(x)/length(x)) # create a function to calculate the standard error
}
detergentMean <- with(data, tapply(Growth.rate, INDEX = Detergent,
FUN = mean))
detergentSEM <- with(data, tapply(Growth.rate, INDEX = Detergent,
FUN = seFun))
cloneMean <- with(data, tapply(Growth.rate, INDEX = Daphnia, FUN = mean))
cloneSEM <- with(data, tapply(Growth.rate, INDEX = Daphnia, FUN = seFun))
Now we can use par(mfrow=(2,1), mar=c(4,4,1,1)) to plot them one above the other on the
seFun <- function(x) {
sqrt(var(x)/length(x)) # create a function to calculate the standard error
}
detergentMean <- with(data, tapply(Growth.rate, INDEX = Detergent,
FUN = mean))
detergentSEM <- with(data, tapply(Growth.rate, INDEX = Detergent,
FUN = seFun))
cloneMean <- with(data, tapply(Growth.rate, INDEX = Daphnia, FUN = mean))
cloneSEM <- with(data, tapply(Growth.rate, INDEX = Daphnia, FUN = seFun))
Now we can use par(mfrow=(2,1), mar=c(4,4,1,1)) to plot them one above the other on the
same graphics device and to reduce the size of the margins (Figure 2).
par(mfrow=c(2,1),mar=c(4,4,1,1))
barMids <- barplot(detergentMean, xlab = "Detergent type", ylab = "Population
growth rate",
ylim = c(0, 5))
arrows(barMids, detergentMean - detergentSEM, barMids, detergentMean +
detergentSEM, code = 3, angle = 90)
Statistics with Sparrows
6
barMids <- barplot(cloneMean, xlab = "Daphnia clone", ylab = "Population grow
th rate",
ylim = c(0, 5))
arrows(barMids, cloneMean - cloneSEM, barMids, cloneMean + cloneSEM,
code = 3, angle = 90)
lm(formula = growth.rate ~ Detergent + Daphnia, data = data)
model <- lm(formula = growth.rate ~ Detergent + Daphnia, data = data)
summary()
summary(model)
model <- lm(formula = growth.rate ~ Detergent + Daphnia, data = data)
summary(model)
model <- lm(formula = growth.rate ~ Detergent + Daphnia, data = data)
model <- lm(Growth.rate ~ Detergent + Daphnia, data = data)
summary(model)
model <- lm(Growth.rate ~ Detergent + Daphnia, data = data)
summary(model)
model <- lm(Growth.rate ~ Detergent * Daphnia, data = data)
summary(model)
#### extra tips and tricks #####
pairs(data)
#### extra tips and tricks #####
pairs(data)
#### extra tips and tricks #####
pairs(data$Growth.rate) # used to test for colinearity
rm(list=ls()) #cleaning your environment
getwd() #check the working directory we are in
setwd("/cloud/project/SwS01Workspace") #re-set the working directory tp
getwd() #check that it worked
2*2+1 #basic addition and multiplication
2*(2+1)
data #load data
boxplot(data$Mass~data$Sex.1, col = c("red", "blue"), ylab="body mass(g)") #bowplot of male and female
t.test1 <- t.test(data$Mass ~ data$Sex.1)
t.test1
data <- subset(data, data$Year == 2001)
data
model <- lm(Tarsus~Mass, data = data)
summary(model)
plot(Tarsus~Mass, data = data)
x <- c(1,2,3,4,8)
#ANOVAs
rm(list=ls())
data <- read.csv("SparrowSize.csv")
data <- read.csv("SparrowSize.csv", header=TRUE)
data <- subset(data, data$Wing!="NA")
####look at the histogram####
hist(data$Wing)
summary(model)
#### plot model####
model <- lm(Wing ~ Sex.1, data = data)
boxplot(data$Wing~data$Sex.1, ylab="Wing length (mm)")
# now we want the F statistic, as well as the linear model info
###### perform the ANVOA #######
anova(model)
##### Post-hoc t test#####
t.test(data$Wing~data$Sex.1, var.equal=TRUE)
# alternative hypothesis: true difference in means between group female and group male is not equal to 0
# mean in group female versus male
boxplot(data$Mass~data$Year)
data <- read.csv("fisheries.csv")
require(ggplot2)
require(MASS)
require(ggpubr)
str(fish)
fish <- read.csv("fisheries.csv", stringsAsFactor = T)
str(fish)
fish
fish
ggplot(fish, aes(x=MeanDepth, y=TotAbund))
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
lab(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
lab(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
fish <- read.csv("fisheries.csv", stringsAsFactor = T)
g <- ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
lab(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
require(ggplot2)
require(MASS)
require(ggpubr)
fis
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
lab(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
require(ggplot2)
install.packages("ggpubr")
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
lab(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
labs(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
M1 <- glm(TotAbund ~ MeanDepth, data = fish, family = "poisson")
summary(M1)
M1 <- glm(TotAbund ~ MeanDepth, data = fish, family = "poisson")
summary(M1)
hist(fish$TotAbund)
M1 <- glm(TotAbund ~ MeanDepth, data = fish, family = "poisson")
summary(M1)
ggplot(fish, aes(x=MeanDepth, y=TotAbund))+
geom_point()+
labs(x="Mean Depth (km)", y="Total Abundance")+
theme_classic()
157701577015770
# dispersion value = 1 - (residual deviance / null devisance)
1 - (15770/27779)
plot(M1)
par(mfrow=c(2,2))
plot(M1)
sum(cooks.distance(M1)>1)
summary(M1)
1 - (15770/144)
fish$period <- factor(fish$Period)
M2 <- glm(TotAbund~MeanDepth*Period, data = fish, family="poisson")
summary(M2)
summary(M2)
anova(M2, test="chisq")
anova(M2, test="Chisq")
fish$period <- factor(fish$Period)
M2 <- glm(TotAbund~MeanDepth*Period, data = fish, family="poisson")
summary(M2)
anova(M2, test="Chisq")
M3 <- glm.nb(TotAbund~MeanDepth*Period, data = fish)
summary(M3)
anova(M3, test="Chisq")
M3 <- glm.nb(TotAbund~MeanDepth*Period, data = fish)
summary(M3)
anova(M3, test="Chisq")
# Binomial and binary models
require(ggplot2)
require(ggpubr)
worker <- read.csv("workerbees.csv")
worker <- read.csv("workerbees.csv")
worker <- read.csv("workerbees.csv", stringsAsFactors = T)
worker
M1 <- glm(Parasites~CellSize, data = worker, family = "binomial")
summary(M1)
M1 <- glm(Parasites~CellSize, data = worker, family = "binomial")
summary(M1)
M1 <- glm(Parasites~CellSize, data = worker, family = "binomial")
summary(M1)
logit(ProbabilityofParasites) = -11.25+22.18*CellSize
logit(ProbabilityofParasites) = -11.25+22.18* CellSize
require(ggplot2)
require(ggpubr)
worker <- read.csv("workerbees.csv", stringsAsFactors = T)
worker
M1 <- glm(Parasites~CellSize, data = worker, family = "binomial") #non-normal
summary(M1)
#logit(ProbabilityofParasites) = -11.25+22.18 * CellSize # the results from the model
# with increasing cell sixe of the honey comb increases the probability being infcet ed by the parasite
#input the equation: this suggests that a honey comb cell size above 0.51 is more liely to be infected by the mite,
range(worker$CellSize) # Finding the range of Cell Size
## [1] 0.352 0.664
new_data <- data.frame(CellSize=seq(from=0.352, to=0.664, length=100))
predictions<- predict(M1, newdata = new_data, type = "link", se.fit = TRUE) # the type="link" here predicted the fit and se on the log-linear scale.
new_data$pred<- predictions$fit
new_data$se<- predictions$se.fit
new_data$upperCI<- new_data$pred+(new_data$se*1.96)
new_data$lowerCI<- new_data$pred-(new_data$se*1.96)
# Making the Plot
ggplot(new_data, aes(x=CellSize, y=plogis(pred)))+
geom_line(col="black")+
geom_point(worker, mapping = aes(x=CellSize, y=Parasites), col="blue")+
geom_ribbon(aes(ymin=plogis(lowerCI), ymax=plogis(upperCI), alpha=0.2), show.legend = FALSE)+
labs(y="Probability of Infection", x="Cell Size (cm)")+
theme_classic()
# Making the Plot
ggplot(new_data, aes(x=CellSize, y=plogis(pred)))+
geom_line(col="black")+
geom_point(worker, mapping = aes(x=CellSize, y=Parasites), col="blue")+
geom_ribbon(aes(ymin=plogis(lowerCI), ymax=plogis(upperCI), alpha=0.2), show.legend = FALSE)+
labs(y="Probability of Infection", x="Cell Size (cm)")+
theme_classic()
# Making the Plot
ggplot(new_data, aes(x=CellSize, y=plogis(pred)))+
geom_line(col="black")+
geom_point(worker, mapping = aes(x=CellSize, y=Parasites), col="blue")+
geom_ribbon(aes(ymin=plogis(lowerCI), ymax=plogis(upperCI), alpha=0.2), show.legend = FALSE)+
labs(y="Probability of Infection", x="Cell Size (cm)")+
theme_classic()
# Making the Plot
ggplot(new_data, aes(x=CellSize, y=plogis(pred)))+
geom_line(col="black")+
geom_point(worker, mapping = aes(x=CellSize, y=Parasites), col="blue")+
geom_ribbon(aes(ymin=plogis(lowerCI), ymax=plogis(upperCI), alpha=0.2), show.legend = FALSE)+
labs(y="Probability of Infection", x="Cell Size (cm)")+
theme_classic()
# Making the Plot
ggplot(new_data, aes(x=CellSize, y=plogis(pred)))+
geom_line(col="black")+
geom_point(worker, mapping = aes(x=CellSize, y=Parasites), col="blue")+
geom_ribbon(aes(ymin=plogis(lowerCI), ymax=plogis(upperCI), alpha=0.2), show.legend = FALSE)+
labs(y="Probability of Infection", x="Cell Size (cm)")+
theme_classic()
