# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
setwd("~/Documents/CMEECourseWork1/Week3")
# Load necessary packages
if (!requireNamespace("maps", quietly = TRUE)) {
install.packages("maps")
}
library(maps)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDD.csv")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Load necessary packages
if (!requireNamespace("maps", quietly = TRUE)) {
install.packages("maps")
}
library(maps)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered.RData")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered.RData")
setwd("~/Documents/CMEECourseWork1/Week3")
# Load necessary packages
if (!requireNamespace("maps", quietly = TRUE)) {
install.packages("maps")
}
# Load necessary packages
install.packages("maps")
install.packages("maps")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered.RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered.RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered(1).RData")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- read.csv("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
library(maps)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
library(maps)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
load("~/Documents/CMEECourseWork1/Week3/Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
setwd("~/Documents/CMEECourseWork1/Week3")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
ls()
ls()
setwd("~/Documents/CMEECourseWork1/Week3/Data")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("..\Data\GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("../Data/GPDDFiltered(1).RData")
setwd("~/Documents/CMEECourseWork1/Week3")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("../Data/GPDDFiltered(1).RData")
setwd("~/Documents/CMEECourseWork1/Week3/Code")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("../Data/GPDDFiltered(1).RData")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Load necessary packages
install.packages("maps")
install.packages("maps")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
result <- load("../Data/GPDDFiltered(1).RData")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
# Check for necessary columns in the dataset
if (!all(c("Longitude", "Latitude") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
gpdd_data
View(gpdd)
gpdd_data
# Check for necessary columns in the dataset
if (!all(c("log", "lat") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Check for necessary columns in the dataset
if (!all(c("long", "lat") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd_data$Longitude, gpdd_data$Latitude, col = "red", pch = 20, cex = 0.6)
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 20, cex = 0.6)
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 20, cex = 0.6)
# Add title
title("Locations of GPDD Data")
# Save plot as an image
dev.copy(png, filename = "../Results/GPDD_Map.png")
dev.off()
class(gpdd_data)  # Should return "data.frame"
str(gpdd_data)
as.dataframe(gpdd_data)
as.data.frame(gpdd_data)
as.data.frame()# Check for necessary columns in the dataset
if (!all(c("long", "lat") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 20, cex = 0.6)
# Add title
title("Locations of GPDD Data")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd_data <- load("../Data/GPDDFiltered(1).RData")
gpdd_data <- as.data.frame(gpdd_data)
as.data.frame()# Check for necessary columns in the dataset
if (!all(c("long", "lat") %in% colnames(gpdd_data))) {
stop("The GPDD dataset must include 'Longitude' and 'Latitude' columns.")
}
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 20, cex = 0.6)
# Add title
title("Locations of GPDD Data")
# Save plot as an image
dev.copy(png, filename = "../Results/GPDD_Map.png")
dev.off()
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 20, cex = 0.6)
# Superimpose GPDD locations
points(gpdd_data$long, gpdd_data$lat, col = "red", pch = 100, cex = 0.6)
# Add title
title("Locations of GPDD Data")
View(gpdd_data)
View(gpdd)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd1 <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
gpdd <- as.data.frame(gpdd)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
gpdd <- as.data.frame(gpdd)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
View(gpdd_data)
setwd("~/Documents/CMEECourseWork1/Week3/Code")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
gpdd <- load("../Data/GPDDFiltered(1).RData")
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
gpdd
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd$long, gpdd$lat, col = "red", pch = 100, cex = 0.6)
# Add title
title("Locations of GPDD Data")
# Save plot as an image
dev.copy(png, filename = "../Results/GPDD_Map.png")
dev.off()
rm(list=ls())
data <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
data$Type.of.feeding.interaction <- as.character(data$Type.of.feeding.interaction)
#instal packages
#install.packages("ggplot2")
require(ggplot2)
require(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1 && length(unique(subset_data$Location)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location)
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results <- do.call(rbind, Filter(Negate(is.null), regression_results))
regression_results <- t(regression_results)
head(regression_results)
regression_results
rm(list=ls())
data <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
data$Type.of.feeding.interaction <- as.character(data$Type.of.feeding.interaction)
#instal packages
#install.packages("ggplot2")
require(ggplot2)
require(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1 && length(unique(subset_data$Location)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location),
sep = (" - ")
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results <- do.call(rbind, Filter(Negate(is.null), regression_results))
regression_results <- t(regression_results)
head(regression_results)
regression_results
# Write results to CSV
write.csv(regression_results, "../results/PPP_Regress_Results.csv", row.names = FALSE)
#instal packages
#install.packages("ggplot2")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
library(ggplot2)
library(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1 && length(unique(subset_data$Location)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location),
sep = (" - ")
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results <- do.call(rbind, Filter(Negate(is.null), regression_results))
regression_results <- t(regression_results)
regression_results
data <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
data$Type.of.feeding.interaction <- as.character(data$Type.of.feeding.interaction)
data$Predator.lifestage <- as.character(data$Predator.lifestage)
data$Location <- as.character(data$Location)
#instal packages
#install.packages("ggplot2")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
library(ggplot2)
library(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1 && length(unique(subset_data$Location)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location),
sep = (" - ")
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results <- do.call(rbind, Filter(Negate(is.null), regression_results))
regression_results <- t(regression_results)
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
data <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
data$Type.of.feeding.interaction <- as.character(data$Type.of.feeding.interaction)
data$Predator.lifestage <- as.character(data$Predator.lifestage)
data$Location <- as.character(data$Location)
#instal packages
#install.packages("ggplot2")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
library(ggplot2)
library(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location),
sep = (" - ")
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results <- do.call(rbind, Filter(Negate(is.null), regression_results))
regression_results <- t(regression_results)
head(regression_results)
regression_results
# Write results to CSV
write.csv(regression_results, "../results/PPP_Regress_Results.csv", row.names = FALSE)
# Add title
title("Locations of GPDD Data", line = 2)
# Load GPDD data
# Note: Replace the file path with the actual location of the GPDD dataset
load("../Data/GPDDFiltered(1).RData")
# Create a world map
map("world", col = "lightgray", fill = TRUE, bg = "lightblue", mar = c(0, 0, 0, 0))
# Superimpose GPDD locations
points(gpdd$long, gpdd$lat, col = "red", pch = 100, cex = 0.6)
# Add title
title("Locations of GPDD Data", line = 2)
# Save plot as an image
dev.copy(png, filename = "../Results/GPDD_Map.png")
dev.off()
rm(list=ls())
data <- read.csv("../Data/EcolArchives-E089-51-D1.csv")
data$Type.of.feeding.interaction <- as.character(data$Type.of.feeding.interaction)
data$Predator.lifestage <- as.character(data$Predator.lifestage)
data$Location <- as.character(data$Location)
#instal packages
#install.packages("ggplot2")
if (!requireNamespace("ggplot2", quietly = TRUE)) install.packages("ggplot2")
if (!requireNamespace("plyr", quietly = TRUE)) install.packages("plyr")
library(ggplot2)
library(plyr)
# Define regression function with additional checks
Regression <- function(subset_data) {
if (nrow(subset_data) > 1 && length(unique(subset_data$Prey.mass)) > 1 && length(unique(subset_data$Predator.mass)) > 1) {
# Perform linear regression
model <- lm(Predator.mass ~ Prey.mass, data = subset_data)
model_summary <- summary(model)
# Return regression statistics as a data frame
return(data.frame(
Slope = model_summary$coefficients[2, 1],
Intercept = model_summary$coefficients[1, 1],
R_Squared = model_summary$r.squared,
P_Value = model_summary$coefficients[2, 4],
F_Statistic = model_summary$fstatistic[1],
Predictor = paste(
unique(subset_data$Type.of.feeding.interaction),
unique(subset_data$Predator.lifestage),
unique(subset_data$Location),
sep = (" - ")
)
))
} else {
return(NULL) # Skip subsets with insufficient or constant data
}
}
# Apply Regression function to each group using ddply
regression_results_loc <- ddply(data, .(Type.of.feeding.interaction, Predator.lifestage, Location), Regression)
# Filter out NULL rows
regression_results_loc <- do.call(rbind, Filter(Negate(is.null), regression_results_loc))
regression_results_loc <- t(regression_results_loc)
head(regression_results_loc)
regression_results_loc
# Write results to CSV
write.csv(regression_results_loc, "../results/PP_Regress_Results_loc.csv", row.names = FALSE)
